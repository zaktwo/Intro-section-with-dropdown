# # Simple workflow for deploying static content to GitHub Pages
# name: Deploy static content to Pages

# on:
#   # Runs on pushes targeting the default branch
#   push:
#     branches: ["main"]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# jobs:
#  build:
#     runs-on: ubuntu-20.04
#     strategy:
#       matrix:
#         node-version: 18
#     steps:
#     - uses: actions/checkout@v3
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 7
#     - name: Use Node.js 18
#       uses: actions/setup-node@v3
#       with:
#         node-version: 18
#         cache: 'pnpm'
#     - name: Install dependencies
#       run: pnpm install
#   # # Single deploy job since we're just deploying
#   # deploy:
#   #   environment:
#   #     name: github-pages
#   #     url: ${{ steps.deployment.outputs.page_url }}
#   #     build:
#   #     runs-on: ubuntu-latest
#   #   steps:
#   #     - name: Checkout
#   #       uses: actions/checkout@v3
#   #     - name: Install Node.js
#   #       uses: actions/setup-node@v3
#   #       with:
#   #         node-version: 18

#   #     - uses: pnpm/action-setup@v2
#   #       name: Install pnpm
#   #       id: pnpm-install
#   #       with:
#   #         version: 7
#   #         run_install: false

#   #     - name: Get pnpm store directory
#   #       id: pnpm-cache
#   #       shell: bash
#   #       run: |
#   #         echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

#   #     - uses: actions/cache@v3
#   #       name: Setup pnpm cache
#   #       with:
#   #         path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
#   #         key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#   #         restore-keys: |
#   #           ${{ runner.os }}-pnpm-store-

#   #     - name: Install dependencies
#   #       run: pnpm install
#       - name: Setup Pages
#         uses: actions/configure-pages@v3
#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v1
#         with:
#           # Upload entire repository
#           path: './dist'
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v2

name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3

      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
           node-version: 18.16.0

      - name: install pnpm
        uses: pnpm/action-setup@v2
        run: npm install -g pnpm
        with:
          version: 7
      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v3
        with:
          name: production-files
          path: ./dist

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: production-files
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist